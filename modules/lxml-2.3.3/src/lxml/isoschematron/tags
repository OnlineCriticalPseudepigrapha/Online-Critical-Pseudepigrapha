!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
RELAXNG_NS	__init__.py	/^RELAXNG_NS = "http:\/\/relaxng.org\/ns\/structure\/1.0"$/;"	v
SCHEMATRON_NS	__init__.py	/^SCHEMATRON_NS = "http:\/\/purl.oclc.org\/dsdl\/schematron"$/;"	v
SVRL_NS	__init__.py	/^SVRL_NS = "http:\/\/purl.oclc.org\/dsdl\/svrl"$/;"	v
Schematron	__init__.py	/^class Schematron(_etree._Validator):$/;"	c
XML_SCHEMA_NS	__init__.py	/^XML_SCHEMA_NS = "http:\/\/www.w3.org\/2001\/XMLSchema"$/;"	v
__all__	__init__.py	/^__all__ = ['extract_xsd', 'extract_rng', 'iso_dsdl_include',$/;"	v
__call__	__init__.py	/^    def __call__(self, etree):$/;"	m	class:Schematron	file:
__init__	__init__.py	/^    def __init__(self, etree=None, file=None, include=True, expand=True,$/;"	m	class:Schematron
_compile	__init__.py	/^    _compile = iso_svrl_for_xslt1$/;"	v	class:Schematron
_domain	__init__.py	/^    _domain = _etree.ErrorDomains.SCHEMATRONV$/;"	v	class:Schematron
_error_type	__init__.py	/^    _error_type = _etree.ErrorTypes.SCHEMATRONV_ASSERT$/;"	v	class:Schematron
_expand	__init__.py	/^    _expand = iso_abstract_expand$/;"	v	class:Schematron
_extract	__init__.py	/^    def _extract(self, element):$/;"	m	class:Schematron
_extract_rng	__init__.py	/^    _extract_rng = extract_rng$/;"	v	class:Schematron
_extract_xsd	__init__.py	/^    _extract_xsd = extract_xsd$/;"	v	class:Schematron
_include	__init__.py	/^    _include = iso_dsdl_include$/;"	v	class:Schematron
_level	__init__.py	/^    _level = _etree.ErrorLevels.ERROR$/;"	v	class:Schematron
_resources_dir	__init__.py	/^_resources_dir = os.path.join(os.path.dirname(__file__), 'resources')$/;"	v
_schematron_root	__init__.py	/^_schematron_root = '{%s}schema' % SCHEMATRON_NS$/;"	v
_stylesheet_param_dict	__init__.py	/^def _stylesheet_param_dict(paramsDict, kwargsDict):$/;"	f
_validation_errors	__init__.py	/^    _validation_errors = svrl_validation_errors$/;"	v	class:Schematron
_xml_schema_root	__init__.py	/^_xml_schema_root = '{%s}schema' % XML_SCHEMA_NS$/;"	v
basestring	__init__.py	/^    basestring = __builtins__["basestring"]$/;"	v
basestring	__init__.py	/^    basestring = str$/;"	v
bytes	__init__.py	/^    bytes = __builtins__["bytes"]$/;"	v
bytes	__init__.py	/^    bytes = str$/;"	v
extract_rng	__init__.py	/^extract_rng = _etree.XSLT(_etree.parse($/;"	v
extract_xsd	__init__.py	/^extract_xsd = _etree.XSLT(_etree.parse($/;"	v
iso_abstract_expand	__init__.py	/^iso_abstract_expand = _etree.XSLT(_etree.parse($/;"	v
iso_dsdl_include	__init__.py	/^iso_dsdl_include = _etree.XSLT(_etree.parse($/;"	v
iso_svrl_for_xslt1	__init__.py	/^iso_svrl_for_xslt1 = _etree.XSLT(_etree.parse($/;"	v
schematron	__init__.py	/^    def schematron(self):$/;"	m	class:Schematron
schematron	__init__.py	/^    schematron = property(schematron, doc=schematron.__doc__)$/;"	v	class:Schematron
schematron_schema_valid	__init__.py	/^schematron_schema_valid = _etree.RelaxNG(_etree.parse($/;"	v
stylesheet_params	__init__.py	/^def stylesheet_params(**kwargs):$/;"	f
svrl_validation_errors	__init__.py	/^svrl_validation_errors = _etree.XPath($/;"	v
unicode	__init__.py	/^    unicode = __builtins__["unicode"]$/;"	v
unicode	__init__.py	/^    unicode = str$/;"	v
validation_report	__init__.py	/^    def validation_report(self):$/;"	m	class:Schematron
validation_report	__init__.py	/^    validation_report = property(validation_report, doc=validation_report.__doc__)$/;"	v	class:Schematron
validator_xslt	__init__.py	/^    def validator_xslt(self):$/;"	m	class:Schematron
validator_xslt	__init__.py	/^    validator_xslt = property(validator_xslt, doc=validator_xslt.__doc__)$/;"	v	class:Schematron
