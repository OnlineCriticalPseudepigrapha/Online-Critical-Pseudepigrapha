!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLANKLINE_MARKER	local_doctest.py	/^BLANKLINE_MARKER = '<BLANKLINE>'$/;"	v
COMPARISON_FLAGS	local_doctest.py	/^COMPARISON_FLAGS = (DONT_ACCEPT_TRUE_FOR_1 |$/;"	v
DIVIDER	local_doctest.py	/^    DIVIDER = "*" * 70$/;"	v	class:DocTestRunner
DONT_ACCEPT_BLANKLINE	local_doctest.py	/^DONT_ACCEPT_BLANKLINE = register_optionflag('DONT_ACCEPT_BLANKLINE')$/;"	v
DONT_ACCEPT_TRUE_FOR_1	local_doctest.py	/^DONT_ACCEPT_TRUE_FOR_1 = register_optionflag('DONT_ACCEPT_TRUE_FOR_1')$/;"	v
DebugRunner	local_doctest.py	/^class DebugRunner(DocTestRunner):$/;"	c
DocFileCase	local_doctest.py	/^class DocFileCase(DocTestCase):$/;"	c
DocFileSuite	local_doctest.py	/^def DocFileSuite(*paths, **kw):$/;"	f
DocFileTest	local_doctest.py	/^def DocFileTest(path, module_relative=True, package=None,$/;"	f
DocTest	local_doctest.py	/^class DocTest:$/;"	c
DocTestCase	local_doctest.py	/^class DocTestCase(unittest.TestCase):$/;"	c
DocTestFailure	local_doctest.py	/^class DocTestFailure(Exception):$/;"	c
DocTestFinder	local_doctest.py	/^class DocTestFinder:$/;"	c
DocTestParser	local_doctest.py	/^class DocTestParser:$/;"	c
DocTestRunner	local_doctest.py	/^class DocTestRunner:$/;"	c
DocTestSuite	local_doctest.py	/^def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None,$/;"	f
ELLIPSIS	local_doctest.py	/^ELLIPSIS = register_optionflag('ELLIPSIS')$/;"	v
ELLIPSIS_MARKER	local_doctest.py	/^ELLIPSIS_MARKER = '...'$/;"	v
Example	local_doctest.py	/^class Example:$/;"	c
IGNORE_EXCEPTION_DETAIL	local_doctest.py	/^IGNORE_EXCEPTION_DETAIL = register_optionflag('IGNORE_EXCEPTION_DETAIL')$/;"	v
NORMALIZE_WHITESPACE	local_doctest.py	/^NORMALIZE_WHITESPACE = register_optionflag('NORMALIZE_WHITESPACE')$/;"	v
OPTIONFLAGS_BY_NAME	local_doctest.py	/^OPTIONFLAGS_BY_NAME = {}$/;"	v
OutputChecker	local_doctest.py	/^class OutputChecker:$/;"	c
REPORTING_FLAGS	local_doctest.py	/^REPORTING_FLAGS = (REPORT_UDIFF |$/;"	v
REPORT_CDIFF	local_doctest.py	/^REPORT_CDIFF = register_optionflag('REPORT_CDIFF')$/;"	v
REPORT_NDIFF	local_doctest.py	/^REPORT_NDIFF = register_optionflag('REPORT_NDIFF')$/;"	v
REPORT_ONLY_FIRST_FAILURE	local_doctest.py	/^REPORT_ONLY_FIRST_FAILURE = register_optionflag('REPORT_ONLY_FIRST_FAILURE')$/;"	v
REPORT_UDIFF	local_doctest.py	/^REPORT_UDIFF = register_optionflag('REPORT_UDIFF')$/;"	v
Tester	local_doctest.py	/^class Tester:$/;"	c
UnexpectedException	local_doctest.py	/^class UnexpectedException(Exception):$/;"	c
_INDENT_RE	local_doctest.py	/^    _INDENT_RE = re.compile('^([ ]*)(?=\\S)', re.MULTILINE)$/;"	v	class:DocTestParser
_IS_BLANK_OR_COMMENT	local_doctest.py	/^    _IS_BLANK_OR_COMMENT = re.compile(r'^[ ]*(#.*)?$').match$/;"	v	class:DocTestParser
_OPTION_DIRECTIVE_RE	local_doctest.py	/^    _OPTION_DIRECTIVE_RE = re.compile(r'#\\s*doctest:\\s*([^\\n\\'"]*)$',$/;"	v	class:DocTestParser
_OutputRedirectingPdb	local_doctest.py	/^class _OutputRedirectingPdb(pdb.Pdb):$/;"	c
_SpoofOut	local_doctest.py	/^class _SpoofOut(StringIO):$/;"	c
_TestClass	local_doctest.py	/^class _TestClass:$/;"	c
__LINECACHE_FILENAME_RE	local_doctest.py	/^    __LINECACHE_FILENAME_RE = re.compile(r'<doctest '$/;"	v	class:DocTestRunner
__all__	local_doctest.py	/^__all__ = [$/;"	v
__cmp__	local_doctest.py	/^    def __cmp__(self, other):$/;"	m	class:DocTest	file:
__docformat__	local_doctest.py	/^__docformat__ = 'reStructuredText en'$/;"	v
__init__	local_doctest.py	/^    def __init__(self, checker=None, verbose=None, optionflags=0):$/;"	m	class:DocTestRunner
__init__	local_doctest.py	/^    def __init__(self, examples, globs, name, filename, lineno, docstring):$/;"	m	class:DocTest
__init__	local_doctest.py	/^    def __init__(self, mod=None, globs=None, verbose=None,$/;"	m	class:Tester
__init__	local_doctest.py	/^    def __init__(self, out):$/;"	m	class:_OutputRedirectingPdb
__init__	local_doctest.py	/^    def __init__(self, source, want, exc_msg=None, lineno=0, indent=0,$/;"	m	class:Example
__init__	local_doctest.py	/^    def __init__(self, test, example, exc_info):$/;"	m	class:UnexpectedException
__init__	local_doctest.py	/^    def __init__(self, test, example, got):$/;"	m	class:DocTestFailure
__init__	local_doctest.py	/^    def __init__(self, test, optionflags=0, setUp=None, tearDown=None,$/;"	m	class:DocTestCase
__init__	local_doctest.py	/^    def __init__(self, val):$/;"	m	class:_TestClass
__init__	local_doctest.py	/^    def __init__(self, verbose=False, parser=DocTestParser(),$/;"	m	class:DocTestFinder
__patched_linecache_getlines	local_doctest.py	/^    def __patched_linecache_getlines(self, filename):$/;"	m	class:DocTestRunner	file:
__record_outcome	local_doctest.py	/^    def __record_outcome(self, test, f, t):$/;"	m	class:DocTestRunner	file:
__repr__	local_doctest.py	/^    def __repr__(self):$/;"	m	class:DocFileCase	file:
__repr__	local_doctest.py	/^    def __repr__(self):$/;"	m	class:DocTest	file:
__repr__	local_doctest.py	/^    def __repr__(self):$/;"	m	class:DocTestCase	file:
__run	local_doctest.py	/^    def __run(self, test, compileflags, out):$/;"	m	class:DocTestRunner	file:
__str__	local_doctest.py	/^    __str__ = __repr__$/;"	v	class:DocFileCase
__str__	local_doctest.py	/^    __str__ = __repr__$/;"	v	class:DocTestCase
__str__	local_doctest.py	/^    def __str__(self):$/;"	m	class:DocTestFailure	file:
__str__	local_doctest.py	/^    def __str__(self):$/;"	m	class:UnexpectedException	file:
__test__	local_doctest.py	/^__test__ = {"_TestClass": _TestClass,$/;"	v
_check_prefix	local_doctest.py	/^    def _check_prefix(self, lines, prefix, name, lineno):$/;"	m	class:DocTestParser
_check_prompt_blank	local_doctest.py	/^    def _check_prompt_blank(self, lines, indent, name, lineno):$/;"	m	class:DocTestParser
_comment_line	local_doctest.py	/^def _comment_line(line):$/;"	f
_do_a_fancy_diff	local_doctest.py	/^    def _do_a_fancy_diff(self, want, got, optionflags):$/;"	m	class:OutputChecker
_ellipsis_match	local_doctest.py	/^def _ellipsis_match(want, got):$/;"	f
_exception_traceback	local_doctest.py	/^def _exception_traceback(exc_info):$/;"	f
_extract_future_flags	local_doctest.py	/^def _extract_future_flags(globs):$/;"	f
_failure_header	local_doctest.py	/^    def _failure_header(self, test, example):$/;"	m	class:DocTestRunner
_filter	local_doctest.py	/^    def _filter(self, obj, prefix, base):$/;"	m	class:DocTestFinder
_find	local_doctest.py	/^    def _find(self, tests, obj, name, module, source_lines, globs, seen):$/;"	m	class:DocTestFinder
_find_lineno	local_doctest.py	/^    def _find_lineno(self, obj, source_lines):$/;"	m	class:DocTestFinder
_find_options	local_doctest.py	/^    def _find_options(self, source, name, lineno):$/;"	m	class:DocTestParser
_from_module	local_doctest.py	/^    def _from_module(self, module, object):$/;"	m	class:DocTestFinder
_get_test	local_doctest.py	/^    def _get_test(self, obj, name, module, globs, source_lines):$/;"	m	class:DocTestFinder
_indent	local_doctest.py	/^def _indent(s, indent=4):$/;"	f
_min_indent	local_doctest.py	/^    def _min_indent(self, s):$/;"	m	class:DocTestParser
_module_relative_path	local_doctest.py	/^def _module_relative_path(module, path):$/;"	f
_normalize_module	local_doctest.py	/^def _normalize_module(module, depth=2):$/;"	f
_para_re	local_doctest.py	/^_para_re = re.compile('\\s*\\n\\s*\\n\\s*')$/;"	v
_parse_example	local_doctest.py	/^    def _parse_example(self, m, name, lineno):$/;"	m	class:DocTestParser
_test	local_doctest.py	/^def _test():$/;"	f
_unittest_count	local_doctest.py	/^def _unittest_count(docstring):$/;"	f
_unittest_reportflags	local_doctest.py	/^_unittest_reportflags = 0$/;"	v
check_output	local_doctest.py	/^    def check_output(self, want, got, optionflags):$/;"	m	class:OutputChecker
countTestCases	local_doctest.py	/^    def countTestCases(self):$/;"	m	class:DocTestCase
debug	local_doctest.py	/^    def debug(self):$/;"	m	class:DocTestCase
debug	local_doctest.py	/^def debug(module, name, pm=False):$/;"	f
debug_script	local_doctest.py	/^def debug_script(src, pm=False, globs=None):$/;"	f
debug_src	local_doctest.py	/^def debug_src(src, pm=False, globs=None):$/;"	f
find	local_doctest.py	/^    def find(self, obj, name=None, module=None, globs=None,$/;"	m	class:DocTestFinder
format_failure	local_doctest.py	/^    def format_failure(self, err):$/;"	m	class:DocFileCase
format_failure	local_doctest.py	/^    def format_failure(self, err):$/;"	m	class:DocTestCase
get	local_doctest.py	/^    def get(self):$/;"	m	class:_TestClass
get_doctest	local_doctest.py	/^    def get_doctest(self, string, globs, name, filename, lineno):$/;"	m	class:DocTestParser
get_examples	local_doctest.py	/^    def get_examples(self, string, name='<string>'):$/;"	m	class:DocTestParser
getvalue	local_doctest.py	/^    def getvalue(self):$/;"	m	class:_SpoofOut
id	local_doctest.py	/^    def id(self):$/;"	m	class:DocFileCase
id	local_doctest.py	/^    def id(self):$/;"	m	class:DocTestCase
is_private	local_doctest.py	/^def is_private(prefix, base):$/;"	f
master	local_doctest.py	/^master = None$/;"	v
merge	local_doctest.py	/^    def merge(self, other):$/;"	m	class:DocTestRunner
merge	local_doctest.py	/^    def merge(self, other):$/;"	m	class:Tester
output_difference	local_doctest.py	/^    def output_difference(self, example, got, optionflags):$/;"	m	class:OutputChecker
parse	local_doctest.py	/^    def parse(self, string, name='<string>'):$/;"	m	class:DocTestParser
real_pdb_set_trace	local_doctest.py	/^real_pdb_set_trace = pdb.set_trace$/;"	v
register_optionflag	local_doctest.py	/^def register_optionflag(name):$/;"	f
report_failure	local_doctest.py	/^    def report_failure(self, out, test, example, got):$/;"	m	class:DebugRunner
report_failure	local_doctest.py	/^    def report_failure(self, out, test, example, got):$/;"	m	class:DocTestRunner
report_start	local_doctest.py	/^    def report_start(self, out, test, example):$/;"	m	class:DocTestRunner
report_success	local_doctest.py	/^    def report_success(self, out, test, example, got):$/;"	m	class:DocTestRunner
report_unexpected_exception	local_doctest.py	/^    def report_unexpected_exception(self, out, test, example, exc_info):$/;"	m	class:DebugRunner
report_unexpected_exception	local_doctest.py	/^    def report_unexpected_exception(self, out, test, example, exc_info):$/;"	m	class:DocTestRunner
run	local_doctest.py	/^    def run(self, test, compileflags=None, out=None, clear_globs=True):$/;"	m	class:DebugRunner
run	local_doctest.py	/^    def run(self, test, compileflags=None, out=None, clear_globs=True):$/;"	m	class:DocTestRunner
runTest	local_doctest.py	/^    def runTest(self):$/;"	m	class:DocTestCase
run__test__	local_doctest.py	/^    def run__test__(self, d, name):$/;"	m	class:Tester
run_docstring_examples	local_doctest.py	/^def run_docstring_examples(f, globs, verbose=False, name="NoName",$/;"	f
rundict	local_doctest.py	/^    def rundict(self, d, name, module=None):$/;"	m	class:Tester
rundoc	local_doctest.py	/^    def rundoc(self, object, name=None, module=None):$/;"	m	class:Tester
runstring	local_doctest.py	/^    def runstring(self, s, name):$/;"	m	class:Tester
script_from_examples	local_doctest.py	/^def script_from_examples(s):$/;"	f
setUp	local_doctest.py	/^    def setUp(self):$/;"	m	class:DocTestCase
set_continue	local_doctest.py	/^    def set_continue(self):$/;"	m	class:_OutputRedirectingPdb
set_trace	local_doctest.py	/^    def set_trace(self):$/;"	m	class:_OutputRedirectingPdb
set_unittest_reportflags	local_doctest.py	/^def set_unittest_reportflags(flags):$/;"	f
shortDescription	local_doctest.py	/^    def shortDescription(self):$/;"	m	class:DocTestCase
square	local_doctest.py	/^    def square(self):$/;"	m	class:_TestClass
summarize	local_doctest.py	/^    def summarize(self, verbose=None):$/;"	m	class:DocTestRunner
summarize	local_doctest.py	/^    def summarize(self, verbose=None):$/;"	m	class:Tester
tearDown	local_doctest.py	/^    def tearDown(self):$/;"	m	class:DocTestCase
testfile	local_doctest.py	/^def testfile(filename, module_relative=True, name=None, package=None,$/;"	f
testmod	local_doctest.py	/^def testmod(m=None, name=None, globs=None, verbose=None, isprivate=None,$/;"	f
testsource	local_doctest.py	/^def testsource(module, name):$/;"	f
trace_dispatch	local_doctest.py	/^    def trace_dispatch(self, *args):$/;"	m	class:_OutputRedirectingPdb
truncate	local_doctest.py	/^    def truncate(self,   size=None):$/;"	m	class:_SpoofOut
