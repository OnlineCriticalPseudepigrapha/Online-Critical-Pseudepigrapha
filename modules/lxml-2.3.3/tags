!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-tool	Makefile	/^	valgrind --tool=memcheck --leak-check=full --num-callers=30 --suppressions=valgrind-python.supp \\$/;"	m
BUILD_DEF_FILE	update-error-constants.py	/^BUILD_DEF_FILE    = os.path.join("src", "lxml", "xmlerror.pxd")$/;"	v
BUILD_SOURCE_FILE	update-error-constants.py	/^BUILD_SOURCE_FILE = os.path.join("src", "lxml", "xmlerror.pxi")$/;"	v
BytesIO	selftest2.py	/^    BytesIO = StringIO$/;"	v
CYTHON_INSTALLED	setupinfo.py	/^    CYTHON_INSTALLED = False$/;"	v
CYTHON_INSTALLED	setupinfo.py	/^    CYTHON_INSTALLED = True$/;"	v
CustomTestResult	test.py	/^class CustomTestResult(_TextTestResult):$/;"	c
CustomTestRunner	test.py	/^class CustomTestRunner(unittest.TextTestRunner):$/;"	c
DEFAULT_URL	ez_setup.py	/^DEFAULT_URL     = "http:\/\/pypi.python.org\/packages\/%s\/s\/setuptools\/" % sys.version[:3]$/;"	v
DEFAULT_VERSION	ez_setup.py	/^DEFAULT_VERSION = "0.6c11"$/;"	v
ENUM_MAP	update-error-constants.py	/^ENUM_MAP = {$/;"	v
ENUM_ORDER	update-error-constants.py	/^ENUM_ORDER = ($/;"	v
ET	selftest.py	/^ET = ElementTree$/;"	v
EXT_MODULES	setupinfo.py	/^EXT_MODULES = ["lxml.etree", "lxml.objectify"]$/;"	v
HTML_DIR	update-error-constants.py	/^HTML_DIR = os.path.join(sys.argv[1], 'html')$/;"	v
LIBICONV_LOCATION	buildlibxml.py	/^LIBICONV_LOCATION = 'ftp:\/\/ftp.gnu.org\/pub\/gnu\/libiconv\/'$/;"	v
LIBXML2_LOCATION	buildlibxml.py	/^LIBXML2_LOCATION = 'ftp:\/\/xmlsoft.org\/libxml2\/'$/;"	v
LXMLVERSION	Makefile	/^LXMLVERSION=`cat version.txt`$/;"	m
OPTION_AUTO_RPATH	setupinfo.py	/^OPTION_AUTO_RPATH = has_option('auto-rpath')$/;"	v
OPTION_BUILD_LIBXML2XSLT	setupinfo.py	/^OPTION_BUILD_LIBXML2XSLT = staticbuild or has_option('static-deps')$/;"	v
OPTION_DEBUG_GCC	setupinfo.py	/^OPTION_DEBUG_GCC = has_option('debug-gcc')$/;"	v
OPTION_DOWNLOAD_DIR	setupinfo.py	/^    OPTION_DOWNLOAD_DIR = 'libs'$/;"	v
OPTION_DOWNLOAD_DIR	setupinfo.py	/^OPTION_DOWNLOAD_DIR = option_value('download-dir')$/;"	v
OPTION_LIBICONV_VERSION	setupinfo.py	/^OPTION_LIBICONV_VERSION = option_value('libiconv-version')$/;"	v
OPTION_LIBXML2_VERSION	setupinfo.py	/^OPTION_LIBXML2_VERSION = option_value('libxml2-version')$/;"	v
OPTION_LIBXSLT_VERSION	setupinfo.py	/^OPTION_LIBXSLT_VERSION = option_value('libxslt-version')$/;"	v
OPTION_MULTICORE	setupinfo.py	/^OPTION_MULTICORE = option_value('multicore')$/;"	v
OPTION_RUN_TESTS	setup.py	/^OPTION_RUN_TESTS = setupinfo.has_option('run-tests')$/;"	v
OPTION_SHOW_WARNINGS	setupinfo.py	/^OPTION_SHOW_WARNINGS = has_option('warnings')$/;"	v
OPTION_STATIC	setupinfo.py	/^    OPTION_STATIC = True$/;"	v
OPTION_STATIC	setupinfo.py	/^OPTION_STATIC = staticbuild or has_option('static')$/;"	v
OPTION_WITHOUT_ASSERT	setupinfo.py	/^OPTION_WITHOUT_ASSERT = has_option('without-assert')$/;"	v
OPTION_WITHOUT_CYTHON	setupinfo.py	/^OPTION_WITHOUT_CYTHON = has_option('without-cython')$/;"	v
OPTION_WITHOUT_OBJECTIFY	setupinfo.py	/^OPTION_WITHOUT_OBJECTIFY = has_option('without-objectify')$/;"	v
OPTION_WITHOUT_THREADING	setupinfo.py	/^OPTION_WITHOUT_THREADING = has_option('without-threading')$/;"	v
OPTION_WITH_REFNANNY	setupinfo.py	/^OPTION_WITH_REFNANNY = has_option('with-refnanny')$/;"	v
Options	test.py	/^class Options:$/;"	c
PACKAGE_PATH	setupinfo.py	/^PACKAGE_PATH = "src\/lxml\/"$/;"	v
PYTHON	Makefile	/^PYTHON?=python$/;"	m
PYTHON3	Makefile	/^PYTHON3?=python3.0$/;"	m
PYTHONPATH	Makefile	/^	PYTHONPATH=src:$(PYTHONPATH) $(PYTHON) doc\/mkhtml.py doc\/html . ${LXMLVERSION}$/;"	m
PYTHONPATH	Makefile	/^	PYTHONPATH=src:$(PYTHONPATH) $(PYTHON) selftest2.py$/;"	m
PYTHONPATH	Makefile	/^	PYTHONPATH=src:$(PYTHONPATH) $(PYTHON3) selftest.py$/;"	m
PYTHONPATH	Makefile	/^	PYTHONPATH=src:$(PYTHONPATH) $(PYTHON3) selftest2.py$/;"	m
SETUPFLAGS	Makefile	/^SETUPFLAGS=$/;"	m
STATIC_BINARIES	setup.py	/^STATIC_BINARIES = []$/;"	v
STATIC_CFLAGS	setup.py	/^STATIC_CFLAGS = []$/;"	v
STATIC_INCLUDE_DIRS	setup.py	/^STATIC_INCLUDE_DIRS = []$/;"	v
STATIC_LIBRARY_DIRS	setup.py	/^STATIC_LIBRARY_DIRS = []$/;"	v
TESTFLAGS	Makefile	/^TESTFLAGS=-p -v$/;"	m
TESTOPTS	Makefile	/^TESTOPTS=$/;"	m
XINCLUDE	selftest.py	/^XINCLUDE = {}$/;"	v
XML2_CONFIG	setupinfo.py	/^XML2_CONFIG = None$/;"	v
XSLT_CONFIG	setupinfo.py	/^XSLT_CONFIG = None$/;"	v
_ERROR_PRINTED	setupinfo.py	/^_ERROR_PRINTED = False$/;"	v
__LXML_VERSION	versioninfo.py	/^__LXML_VERSION = None$/;"	v
__init__	test.py	/^    def __init__(self, cfg, hooks=None):$/;"	m	class:CustomTestRunner
__init__	test.py	/^    def __init__(self, stream, descriptions, verbosity, count, cfg, hooks):$/;"	m	class:CustomTestResult
__metaclass__	test.py	/^__metaclass__ = type$/;"	v
__super	test.py	/^    __super = _TextTestResult$/;"	v	class:CustomTestResult
__super	test.py	/^    __super = unittest.TextTestRunner$/;"	v	class:CustomTestRunner
__super_init	test.py	/^    __super_init = __super.__init__$/;"	v	class:CustomTestResult
__super_init	test.py	/^    __super_init = __super.__init__$/;"	v	class:CustomTestRunner
__super_printErrors	test.py	/^    __super_printErrors = __super.printErrors$/;"	v	class:CustomTestResult
__super_run	test.py	/^    __super_run = __super.run$/;"	v	class:CustomTestRunner
__super_startTest	test.py	/^    __super_startTest = __super.startTest$/;"	v	class:CustomTestResult
__super_stopTest	test.py	/^    __super_stopTest = __super.stopTest$/;"	v	class:CustomTestResult
_extractall	buildlibxml.py	/^def _extractall(self, path=".", members=None):$/;"	f
_makeResult	test.py	/^    def _makeResult(self):$/;"	m	class:CustomTestRunner
_system_encoding	setupinfo.py	/^        _system_encoding = "iso-8859-1" # :-)$/;"	v
_system_encoding	setupinfo.py	/^    _system_encoding = sys.getdefaultencoding()$/;"	v
_validate_md5	ez_setup.py	/^def _validate_md5(egg_name, data):$/;"	f
addError	test.py	/^    def addError(self, test, err):$/;"	m	class:CustomTestResult
addFailure	test.py	/^    def addFailure(self, test, err):$/;"	m	class:CustomTestResult
append_pxd	update-error-constants.py	/^append_pxd = pxd_result.append$/;"	v
append_pxi	update-error-constants.py	/^append_pxi = pxi_result.append$/;"	v
attrib	selftest2.py	/^def attrib():$/;"	f
bad_find	selftest.py	/^def bad_find():$/;"	f
basedir	test.py	/^    basedir = ''                # base directory for tests (defaults to$/;"	v	class:Options
branch_link	setup.py	/^    branch_link = ""$/;"	v
branch_version	versioninfo.py	/^def branch_version():$/;"	f
bug_200708_newline	selftest.py	/^def bug_200708_newline():$/;"	f
bug_200708_version	selftest.py	/^def bug_200708_version():$/;"	f
bug_200709_default_namespace	selftest.py	/^def bug_200709_default_namespace():$/;"	f
bug_xmltoolkit21	selftest.py	/^def bug_xmltoolkit21():$/;"	f
bug_xmltoolkit25	selftest.py	/^def bug_xmltoolkit25():$/;"	f
bug_xmltoolkit28	selftest.py	/^def bug_xmltoolkit28():$/;"	f
bug_xmltoolkit39	selftest.py	/^def bug_xmltoolkit39():$/;"	f
bug_xmltoolkit45	selftest.py	/^def bug_xmltoolkit45():$/;"	f
bug_xmltoolkit46	selftest.py	/^def bug_xmltoolkit46():$/;"	f
bug_xmltoolkit54	selftest.py	/^def bug_xmltoolkit54():$/;"	f
bug_xmltoolkit55	selftest.py	/^def bug_xmltoolkit55():$/;"	f
bug_xmltoolkitX1	selftest.py	/^def bug_xmltoolkitX1():$/;"	f
build_libxml2xslt	buildlibxml.py	/^def build_libxml2xslt(download_dir, build_dir,$/;"	f
build_packages	setup.py	/^    def build_packages(files):$/;"	f	function:setup_extra_options
call_subprocess	buildlibxml.py	/^def call_subprocess(cmd, **kw):$/;"	f
cdata	selftest2.py	/^def cdata():$/;"	f
cflags	setupinfo.py	/^def cflags(static_cflags):$/;"	f
changes	versioninfo.py	/^def changes():$/;"	f
check_element	selftest.py	/^def check_element(element):$/;"	f
check_element	selftest2.py	/^def check_element(element):$/;"	f
check_element_tree	selftest.py	/^def check_element_tree(tree):$/;"	f
check_element_tree	selftest2.py	/^def check_element_tree(tree):$/;"	f
check_mapping	selftest.py	/^def check_mapping(mapping):$/;"	f
check_mapping	selftest2.py	/^def check_mapping(mapping):$/;"	f
check_string	selftest.py	/^def check_string(string):$/;"	f
check_string	selftest2.py	/^def check_string(string):$/;"	f
check_string_or_none	selftest.py	/^def check_string_or_none(value):$/;"	f
classifiers	setup.py	/^    classifiers = [$/;"	v
cmmi	buildlibxml.py	/^def cmmi(configure_cmd, build_dir, multicore=None, **call_setup):$/;"	f
collect_text	update-error-constants.py	/^collect_text = etree.XPath("string()")$/;"	v
compile_matcher	test.py	/^def compile_matcher(regex):$/;"	f
constant_indent	update-error-constants.py	/^constant_indent = ctypedef_indent*2$/;"	v
constants	update-error-constants.py	/^    constants = enum_dict[enum_name]$/;"	v
copy	selftest2.py	/^def copy():$/;"	f
coverage	test.py	/^    coverage = False            # produce coverage reports (--coverage)$/;"	v	class:Options
coverdir	test.py	/^    coverdir = 'coverage'       # where to put them (currently hardcoded)$/;"	v	class:Options
cpus	buildlibxml.py	/^            cpus = 5$/;"	v
cpus	buildlibxml.py	/^    cpus = multiprocessing.cpu_count()$/;"	v
create_version_h	versioninfo.py	/^def create_version_h(svn_version):$/;"	f
ctypedef_indent	update-error-constants.py	/^ctypedef_indent = ' '*4$/;"	v
data	ez_setup.py	/^            data = _validate_md5(egg_name, src.read())$/;"	v
decode_input	setupinfo.py	/^    def decode_input(data):$/;"	f
define_macros	setupinfo.py	/^def define_macros():$/;"	f
dev_status	versioninfo.py	/^def dev_status():$/;"	f
do_download	ez_setup.py	/^    def do_download():$/;"	f
download_and_extract_zlatkovic_binaries	buildlibxml.py	/^def download_and_extract_zlatkovic_binaries(destdir):$/;"	f
download_libiconv	buildlibxml.py	/^def download_libiconv(dest_dir, version=None):$/;"	f
download_library	buildlibxml.py	/^def download_library(dest_dir, location, name, version_re, filename,$/;"	f
download_libxml2	buildlibxml.py	/^def download_libxml2(dest_dir, version=None):$/;"	f
download_libxslt	buildlibxml.py	/^def download_libxslt(dest_dir, version=None):$/;"	f
download_setuptools	ez_setup.py	/^def download_setuptools($/;"	f
dst	ez_setup.py	/^            dst = open(saveto,"wb"); dst.write(data)$/;"	v
egg_name	ez_setup.py	/^    egg_name = "setuptools-%s-py%s.egg" % (version,sys.version[:3])$/;"	v
element	selftest2.py	/^def element():$/;"	f
encoding	selftest.py	/^def encoding():$/;"	f
encoding	selftest2.py	/^def encoding():$/;"	f
entity	selftest.py	/^def entity():$/;"	f
enum_dict	update-error-constants.py	/^enum_dict = {}$/;"	v
env_var	setupinfo.py	/^def env_var(name):$/;"	f
error	selftest.py	/^def error(xml):$/;"	f
exitcode	test.py	/^    exitcode = main(sys.argv)$/;"	v
ext_modules	setupinfo.py	/^def ext_modules(static_include_dirs, static_library_dirs,$/;"	f
extra_options	setup.py	/^extra_options = {}$/;"	v
extra_setup_args	setupinfo.py	/^def extra_setup_args():$/;"	f
extract_files	setup.py	/^    def extract_files(directories, pattern='*'):$/;"	f	function:setup_extra_options
fancyparsefile	selftest.py	/^def fancyparsefile():$/;"	f
filter_testsuite	test.py	/^def filter_testsuite(suite, matcher, level=None):$/;"	f
find	selftest.py	/^def find():$/;"	f
find	selftest2.py	/^def find():$/;"	f
find_dependencies	setupinfo.py	/^def find_dependencies(module):$/;"	f
find_enums	update-error-constants.py	/^find_enums = etree.XPath($/;"	v
find_xml2_config	setupinfo.py	/^def find_xml2_config():$/;"	f
find_xslt_config	setupinfo.py	/^def find_xslt_config():$/;"	f
fix_alphabeta	versioninfo.py	/^def fix_alphabeta(version, alphabeta):$/;"	f
fix_compatibility	selftest.py	/^def fix_compatibility(xml_data):$/;"	f
flags	setupinfo.py	/^def flags(option):$/;"	f
follow_symlinks	test.py	/^    follow_symlinks = True      # should symlinks to subdirectories be$/;"	v	class:Options
formatError	test.py	/^    def formatError(self, err):$/;"	m	class:CustomTestResult
ftp_listdir	buildlibxml.py	/^def ftp_listdir(url):$/;"	f
functional_tests	test.py	/^    functional_tests = False    # functional tests$/;"	v	class:Options
getShortDescription	test.py	/^    def getShortDescription(self, test):$/;"	m	class:CustomTestResult
get_all_test_cases	test.py	/^def get_all_test_cases(module):$/;"	f
get_base_dir	versioninfo.py	/^def get_base_dir():$/;"	f
get_files	setup.py	/^        def get_files(root, dir_path, files):$/;"	f	function:setup_extra_options.extract_files
get_library_versions	setupinfo.py	/^def get_library_versions():$/;"	f
get_prebuilt_libxml2xslt	buildlibxml.py	/^def get_prebuilt_libxml2xslt(download_dir, static_include_dirs, static_library_dirs):$/;"	f
get_test_cases	test.py	/^def get_test_cases(test_files, cfg, tracer=None):$/;"	f
get_test_classes_from_testsuite	test.py	/^def get_test_classes_from_testsuite(suite):$/;"	f
get_test_files	test.py	/^def get_test_files(cfg):$/;"	f
get_test_hooks	test.py	/^def get_test_hooks(test_files, cfg, tracer=None):$/;"	f
has_option	setupinfo.py	/^def has_option(name):$/;"	f
immediate_errors	test.py	/^    immediate_errors = False    # show tracebacks twice (currently hardcoded)$/;"	v	class:Options
import_module	test.py	/^def import_module(filename, cfg, tracer=None):$/;"	f
include_dirs	setupinfo.py	/^def include_dirs(static_include_dirs):$/;"	f
interface	selftest.py	/^def interface():$/;"	f
is_pre_release	versioninfo.py	/^def is_pre_release():$/;"	f
iterators	selftest.py	/^def iterators():$/;"	f
iterparse	selftest.py	/^def iterparse():$/;"	f
length	update-error-constants.py	/^            length = 2 # each string ends with '\\n\\0'$/;"	v
length	update-error-constants.py	/^    length = 2 # each string ends with '\\n\\0'$/;"	v
level	test.py	/^    level = 1                   # run only tests at this or lower level$/;"	v	class:Options
libraries	setupinfo.py	/^def libraries():$/;"	f
library_dirs	setupinfo.py	/^def library_dirs(static_library_dirs):$/;"	f
list_files	test.py	/^    list_files = False          # --list-files$/;"	v	class:Options
list_hooks	test.py	/^    list_hooks = False          # --list-hooks$/;"	v	class:Options
list_tests	test.py	/^    list_tests = False          # --list-tests$/;"	v	class:Options
main	ez_setup.py	/^def main(argv, version=DEFAULT_VERSION):$/;"	f
main	test.py	/^def main(argv):$/;"	f
makeelement	selftest2.py	/^def makeelement():$/;"	f
match_libfile_version	buildlibxml.py	/^match_libfile_version = re.compile('^[^-]*-([.0-9-]+)[.].*').match$/;"	v
md5_data	ez_setup.py	/^md5_data = {$/;"	v
methods	selftest.py	/^def methods():$/;"	f
multi_make_options	buildlibxml.py	/^        multi_make_options = ['-j%d' % (cpus+1)]$/;"	v
multi_make_options	buildlibxml.py	/^multi_make_options = []$/;"	v
name	update-error-constants.py	/^            name = name[prefix_len:]$/;"	v
namespace	selftest.py	/^def namespace():$/;"	f
namespaces	update-error-constants.py	/^    namespaces = {'html' : 'http:\/\/www.w3.org\/1999\/xhtml'})$/;"	v
normalize_crlf	selftest.py	/^def normalize_crlf(tree):$/;"	f
option_value	setupinfo.py	/^def option_value(name):$/;"	f
parse_enums	update-error-constants.py	/^def parse_enums(html_dir, html_filename, enum_dict):$/;"	f
parsefile	selftest.py	/^def parsefile():$/;"	f
parsefile	selftest2.py	/^def parsefile():$/;"	f
parsehtml	selftest.py	/^def parsehtml():$/;"	f
parseliteral	selftest.py	/^def parseliteral():$/;"	f
pathname_regex	test.py	/^    pathname_regex = ''         # regexp for filtering filenames$/;"	v	class:Options
prefix_len	update-error-constants.py	/^    prefix_len = len(prefix)$/;"	v
printErrors	test.py	/^    def printErrors(self):$/;"	m	class:CustomTestResult
printTraceback	test.py	/^    def printTraceback(self, kind, test, err):$/;"	m	class:CustomTestResult
proc_call	buildlibxml.py	/^        def proc_call(cmd, **kwargs):$/;"	f	function:call_subprocess
progress	test.py	/^    progress = False            # show running progress (-p)$/;"	v	class:Options
pxd_result	update-error-constants.py	/^pxd_result = []$/;"	v
pxi_result	update-error-constants.py	/^pxi_result = []$/;"	v
qname	selftest.py	/^def qname():$/;"	f
qname	selftest2.py	/^def qname():$/;"	f
quiet	test.py	/^    quiet = 0                   # do not print anything on success (-q)$/;"	v	class:Options
regenerate_file	update-error-constants.py	/^def regenerate_file(filename, result):$/;"	f
run	test.py	/^    def run(self, test):$/;"	m	class:CustomTestRunner
run_command	setupinfo.py	/^def run_command(cmd, *args):$/;"	f
run_tests	test.py	/^    run_tests = True            # run tests (disabled by --list-foo)$/;"	v	class:Options
safe_mkdir	buildlibxml.py	/^def safe_mkdir(dir):$/;"	f
sanity	selftest.py	/^def sanity():$/;"	f
saveto	ez_setup.py	/^    saveto = os.path.join(to_dir, egg_name)$/;"	v
screen_width	test.py	/^    screen_width = 80           # screen width (autodetected)$/;"	v	class:Options
serialize	selftest.py	/^def serialize(elem, **options):$/;"	f
serialize	selftest2.py	/^def serialize(elem, encoding=None):$/;"	f
setup_extra_options	setup.py	/^def setup_extra_options():$/;"	f
simplefind	selftest.py	/^def simplefind():$/;"	f
simpleops	selftest.py	/^def simpleops():$/;"	f
simpleparsefile	selftest.py	/^def simpleparsefile():$/;"	f
split	update-error-constants.py	/^def split(lines):$/;"	f
split_version	versioninfo.py	/^def split_version(version):$/;"	f
src	ez_setup.py	/^            src = urllib2.urlopen(url)$/;"	v
startTest	test.py	/^    def startTest(self, test):$/;"	m	class:CustomTestResult
staticbuild	setupinfo.py	/^staticbuild = bool(os.environ.get('STATICBUILD', ''))$/;"	v
stderr	test.py	/^def stderr(text):$/;"	f
stopTest	test.py	/^    def stopTest(self, test):$/;"	m	class:CustomTestResult
summarize	selftest.py	/^def summarize(elem):$/;"	f
summarize	selftest2.py	/^def summarize(elem):$/;"	f
summarize_list	selftest.py	/^def summarize_list(seq):$/;"	f
summarize_list	selftest2.py	/^def summarize_list(seq):$/;"	f
svn_version	setup.py	/^svn_version = versioninfo.svn_version()$/;"	v
svn_version	versioninfo.py	/^def svn_version():$/;"	f
test_regex	test.py	/^    test_regex = ''             # regexp for filtering test cases$/;"	v	class:Options
tryint	buildlibxml.py	/^def tryint(s):$/;"	f
unit_tests	test.py	/^    unit_tests = False          # unit tests (default if both are false)$/;"	v	class:Options
unpack_tarball	buildlibxml.py	/^def unpack_tarball(tar_filename, dest):$/;"	f
unpack_zipfile	buildlibxml.py	/^def unpack_zipfile(zipfn, destdir):$/;"	f
unserialize	selftest2.py	/^def unserialize(text):$/;"	f
update_md5	ez_setup.py	/^def update_md5(filenames):$/;"	f
url	ez_setup.py	/^    url = download_base + egg_name$/;"	v
use_setuptools	ez_setup.py	/^def use_setuptools($/;"	f
verbosity	test.py	/^    verbosity = 0               # verbosity level (-v)$/;"	v	class:Options
version	selftest.py	/^def version():$/;"	f
version	versioninfo.py	/^def version():$/;"	f
visit	test.py	/^    def visit(ignored, dir, files):$/;"	f	function:get_test_files
walk_with_symlinks	test.py	/^def walk_with_symlinks(top, func, arg):$/;"	f
warn_omitted	test.py	/^    warn_omitted = False        # produce warnings when a test case is$/;"	v	class:Options
was_imported	ez_setup.py	/^    was_imported = 'pkg_resources' in sys.modules or 'setuptools' in sys.modules$/;"	v
writefile	selftest.py	/^def writefile():$/;"	f
writefile	selftest2.py	/^def writefile():$/;"	f
writestring	selftest.py	/^def writestring():$/;"	f
xinclude	selftest.py	/^def xinclude():$/;"	f
xinclude_default	selftest.py	/^def xinclude_default():$/;"	f
xinclude_loader	selftest.py	/^def xinclude_loader(href, parse="xml", encoding=None):$/;"	f
xmlwriter	selftest.py	/^def xmlwriter():$/;"	f
xpath_tokenizer	selftest.py	/^def xpath_tokenizer(p):$/;"	f
